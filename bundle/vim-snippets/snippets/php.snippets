snippet <?
	<?php

	${0}
snippet ec
	echo ${0};
snippet <?e
	<?php echo ${0} ?>
# this one is for php5.4
snippet <?=
	<?=${0}?>
snippet ?=
	<?= ${0} ?>
snippet ?
	<?php ${0} ?>
snippet ?f
	<?php foreach ($${1:vars} as $${2:$var}): ?>
		${0}
	<?php endforeach ?>
snippet ?i
	<?php if ($${1:var}): ?>
		${0}
	<?php endif ?>
snippet ns
	namespace ${1:Foo\Bar\Baz};
	${0}
snippet use
	use ${1:Foo\Bar\Baz};
	${0}
snippet	c
	class ${1:`vim_snippets#Filename()`}
	{
		${0}
	}
snippet i
	interface ${1:`vim_snippets#Filename()`}
	{
		${0}
	}
snippet t.
	$this->
snippet f
	function ${1:foo}(${2:array }${3:$bar})
	{
		${0}
	}
# method
snippet m
	${1:protected} function ${2:foo}() {
		${0}
	}
# setter method
snippet sm
	/**
	 * Sets the value of ${1:foo}
	 *
	 * @param ${2:$1} $$1 ${3:description}
	 *
	 * @return ${4:`vim_snippets#Filename()`}
	 */
	${5:public} function set${6:$2}(${7:$2 }$$1)
	{
		$this->${8:$1} = $$1;
		return $this;
	}
# getter method
snippet gm
	/**
	 * Gets the value of ${1:foo}
	 *
	 * @return ${2:$1}
	 */
	${3:public} function get${4:$2}()
	{
		return $this->${5:$1};
	}
#setter
snippet $s
	${1:$foo}->set${2:Bar}(${0});
#getter
snippet $g
	${1:$foo}->get${0:Bar}();

# Tertiary conditional
snippet =?:
	$${1:foo} = ${2:true} ? ${3:a} : ${0};
snippet ?:
	${1:true} ? ${2:a} : ${0}

snippet C
	$_COOKIE['${1:variable}']
snippet E
	$_ENV['${1:variable}']
snippet F
	$_FILES['${1:variable}']
snippet G
	$_GET['${1:variable}']
snippet P
	$_POST['${1:variable}']
snippet R
	$_REQUEST['${1:variable}']
snippet S
	$_SERVER['${1:variable}']
snippet SS
	$_SESSION['${1:variable}']

# the following are old ones
snippet inc
	include '${1:file}';
snippet inc1
	include_once '${1:file}';
snippet req
	require '${1:file}';
snippet req1
	require_once '${1:file}';
# Start Docblock
snippet /*
	/**
	 * ${0}
	 */
# Class - post doc
snippet doc_cp
	/**
	 * ${1:undocumented class}
	 *
	 * @package ${2:default}
	 * @subpackage ${3:default}
	 * @author ${4:`g:snips_author`}
	 */
# Class Variable - post doc
snippet doc_vp
	/**
	 * ${1:undocumented class variable}
	 *
	 * @var ${2:string}
	 */
# Class Variable
snippet doc_v
	/**
	 * ${3:undocumented class variable}
	 *
	 * @var ${4:string}
	 */
	${1:var} $${2};
# Class
snippet doc_c
	/**
	 * ${3:undocumented class}
	 *
	 * @package ${4:default}
	 * @subpackage ${5:default}
	 * @author ${6:`g:snips_author`}
	 */
	${1:}class ${2:}
	{
		${0}
	} // END $1class $2
# Constant Definition - post doc
snippet doc_dp
	/**
	 * ${1:undocumented constant}
	 */
# Constant Definition
snippet doc_d
	/**
	 * ${3:undocumented constant}
	 */
	define(${1}, ${2});
# Function - post doc
snippet doc_fp
	/**
	 * ${1:undocumented function}
	 *
	 * @return ${2:void}
	 * @author ${3:`g:snips_author`}
	 */
# Function signature
snippet doc_s
	/**
	 * ${4:undocumented function}
	 *
	 * @return ${5:void}
	 * @author ${6:`g:snips_author`}
	 */
	${1}function ${2}(${3});
# Function
snippet doc_f
	/**
	 * ${4:undocumented function}
	 *
	 * @return ${5:void}
	 * @author ${6:`g:snips_author`}
	 */
	${1}function ${2}(${3})
	{${0}
	}
# Header
snippet doc_h
	/**
	 * ${1}
	 *
	 * @author ${2:`g:snips_author`}
	 * @version ${3:$Id$}
	 * @copyright ${4:$2}, `strftime('%d %B, %Y')`
	 * @package ${0:default}
	 */

# Interface
snippet interface
	/**
	 * ${2:undocumented class}
	 *
	 * @package ${3:default}
	 * @author ${4:`g:snips_author`}
	 */
	interface ${1:`vim_snippets#Filename()`}
	{
		${0}
	}
# class ...
snippet class
	/**
	 * ${1}
	 */
	class ${2:`vim_snippets#Filename()`}
	{
		${3}
		/**
		 * ${4}
		 */
		${5:public} function ${6:__construct}(${7:argument})
		{
			${0}
		}
	}
snippet nc
	namespace ${1:`substitute(substitute(expand("%:h"), '\v^\w+\/(\u)', '\1', ''), '\/', '\\\', 'g')`};

	${2:abstract }class ${3:`vim_snippets#Filename()`}
	{
		${0}
	}
# define(...)
snippet def
	define('${1}'${2});
# defined(...)
snippet def?
	${1}defined('${2}')
snippet wh
	while (${1:/* condition */}) {
		${0}
	}
# do ... while
snippet do
	do {
		${0}
	} while (${1:/* condition */});
snippet if
	if (${1:/* condition */}) {
		${0}
	}
snippet ifn
	if (!${1:/* condition */}) {
		${2}
	}
snippet ifil
	<?php if (${1:/* condition */}): ?>
		${0}
	<?php endif; ?>
snippet ife
	if (${1:/* condition */}) {
		${2}
	} else {
		${3}
	}
	${0}
snippet ifeil
	<?php if (${1:/* condition */}): ?>
		${2:<!-- html... -->}
	<?php else: ?>
		${3:<!-- html... -->}
	<?php endif; ?>
	${0}
snippet el
	else {
		${0}
	}
snippet eif
	elseif (${1:/* condition */}) {
		${0}
	}
snippet switch
	switch ($${1:variable}) {
		case '${2:value}':
			${3}
			break;
		${0}
		default:
			${4}
			break;
	}
snippet case
	case '${1:value}':
		${2}
		break;
snippet for
	for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
		${0}
	}
snippet foreach
	foreach ($${1:variable} as $${2:value}) {
		${0}
	}
snippet foreachil
	<?php foreach ($${1:variable} as $${2:value}): ?>
		${0:<!-- html... -->}
	<?php endforeach; ?>
snippet foreachk
	foreach ($${1:variable} as $${2:key} => $${3:value}) {
		${0}
	}
snippet foreachkil
	<?php foreach ($${1:variable} as $${2:key} => $${3:value}): ?>
		${0:<!-- html... -->}
	<?php endforeach; ?>
# $... = array (...)
snippet array
	$${1:arrayName} = array('${2}' => ${3});
snippet try
	try {
		${0}
	} catch (${1:Exception} $e) {
	}
# lambda with closure
snippet lambda
	${1:static }function (${2:args}) use (${3:&$x, $y /*put vars in scope (closure) */}) {
		${0}
	};
# pre_dump();
snippet pd
	echo '<pre>'; var_dump(${0}); echo '</pre>';
# pre_dump(); die();
snippet pdd
	echo '<pre>'; var_dump(${1}); echo '</pre>'; die(${0:});
snippet vd
	var_dump(${0});
snippet vdd
	var_dump(${1}); die(${0:});
snippet vdf
	error_log(print_r($${1:foo}, true), 3, '${2:/tmp/debug.log}');
snippet http_redirect
	header ("HTTP/1.1 301 Moved Permanently");
	header ("Location: ".URL);
	exit();
# Getters & Setters
snippet gs
	/**
	 * Gets the value of ${1:foo}
	 *
	 * @return ${2:$1}
	 */
	public function get${3:$2}()
	{
		return $this->${4:$1};
	}

	/**
	 * Sets the value of $1
	 *
	 * @param $2 $$1 ${5:description}
	 *
	 * @return ${6:`vim_snippets#Filename()`}
	 */
	public function set$3(${7:$2 }$$1)
	{
		$this->$4 = $$1;
		return $this;
	}
# anotation, get, and set, useful for doctrine
snippet ags
	/**
	 * ${1:description}
	 *
	 * @${0}
	 */
	${2:protected} $${3:foo};

	public function get${4:$3}()
	{
		return $this->$3;
	}

	public function set$4(${5:$4 }$${6:$3})
	{
		$this->$3 = $$6;
		return $this;
	}
snippet rett
	return true;
snippet retf
	return false;
snippet am
	$${1:foo} = array_map(function($${2:v}) {
		${0}
		return $$2;
	}, $$1);
snippet aw
	array_walk($${1:foo}, function(&$${2:v}, $${3:k}) {
		$$2 = ${0};
	});

# static var assign once
snippet static_var
	static $${1} = null;
	if (is_null($$1)){
		$$1 = ${2};
	}

snippet CSVWriter
	<?php
	
	class CSVWriter {
		public function __construct($file_or_handle, $sep = "\t", $quot = '"'){
			$args = func_get_args();
			$mode = isset($opts['mode']) ? $opts['mode'] : 'w';
	
			$this->f =
				is_string($file_or_handle)
				? fopen($file_or_handle, $mode)
				: $file_or_handle;
	
			$this->fputcsv_args = array($this->f, null, $sep, $quot);
	
			if (!$this->f) throw new Exception('bad file descriptor');
		}
	
		public function write($row){
			$this->fputcsv_args[1] =& $row;
			call_user_func_array('fputcsv', $this->fputcsv_args);
		}
	
		public function close(){
			if (!is_null($this->f))
				fclose($this->f);
			$this->f = null;
		}
	
		public function __destruct(){
			$this->close();
		}
	
	}

snippet CSVIterator
	
	// http://snipplr.com/view.php?codeview&id=1986 // modified
	class CSVIterator implements Iterator
	{	
		private $f;
		private $curr;
		private $rowCounter;
	
		 /* opts keys:
			* row_size
			* escape
			* enclosure
			* delimiter
			*/
		public function __construct( $file_or_handle, $opts = array(4096, ',') )
		{
			$d = function($n) use(&$opts){ return isset($opts[$n]) ? $opts[$n] : false; };
	
			$this->combine = $d('combine');
			$this->headers = $d('headers');
			$this->headerCheckFunction = $d('header_check_function');
	
			$this->f =
				is_string($file_or_handle)
				? fopen( $file_or_handle, 'r' )
				: $file_or_handle;
			if (!$this->f) throw new Exception('bad file descriptor');
			$this->fgetcsv_args = array(
					$this->f,
					isset($opts['row_size']) ? $opts['row_size'] : 4096,
					isset($opts['delimiter']) ? $opts['delimiter'] : ',',
					isset($opts['enclosure']) ? $opts['enclosure'] : '"',
					isset($opts['escape']) ? $opts['escape'] : '\\',
			);
			$this->start();
		}
	
		protected function readRow(){
			$this->curr = call_user_func_array('fgetcsv', $this->fgetcsv_args );
			$this->rowCounter++;
			if ($this->rowCounter == 1){
				$this->processHeader();
			} elseif ($this->curr) {
				$this->processRow();
			}
		}
	
		public function processHeader(){
			if ($this->headers || $this->combine){
				$this->header = $this->curr;
				if ($this->headerCheckFunction){
					$f = $this->headerCheckFunction;
					$f($this->header);
				}
				$this->readRow();
			}
		}
	
		public function processRow(){
			if ($this->combine)
				$this->curr = array_combine($this->header, $this->curr);
		}
	
		public function start(){
			$this->rowCounter = 0;
			rewind( $this->f );
			$this->readRow();
		}
	
		public function rewind()
		{
			$this->start();
		}
	
		public function current()
		{
			$curr = $this->curr;
			$this->readRow();
			return $curr;
		}
	
		public function key()
		{
			return $this->rowCounter;
		}
	
		public function next()
		{
			return $this->curr;
		}
	
		public function valid(){
			if( !$this->next() )
			{
				fclose( $this->f );
				return FALSE;
			}
			return TRUE;
		}
	
	} // end class

snippet is
	isset($1{VISUAL})

# phpunit	
snippet ase
	$this->assertEquals(${1:expected}, ${2:actual});

snippet asne
	$this->assertNotEquals(${1:expected}, ${2:actual});

snippet asf
	$this->assertFalse(${1:Something});

snippet ast
	$this->assertTrue(${1:Something});

snippet asfex
	$this->assertFileExists(${1:path/to/file});

snippet asfnex
	$this->assertFileNotExists(${1:path/to/file});

snippet ascon
	$this->assertContains(${1:Search Value}, ${2:Array or Iterator});

snippet ashk
	$this->assertArrayHasKey(${1:key}, ${2:array});

snippet asnhk
	this->assertArrayNotHasKey(${1:value}, ${2:array});

snippet ascha
	$this->assertClassHasAttribute('${1:Attribute Name}', '${2:ClassName}');

snippet asi
	$this->assertInstanceOf(${1:expected}, ${2:actual});

snippet tc
	public function test${1:name_of_the_test}()
	{
		${0:code}
	}

# CodeIgniter
snippet inputpost
	$this->input->post('${1}')
snippet tplvar
	$this->tplVar
snippet tplvare
	$this->tplVar['${1}'] = ${2}
snippet layout
	$this->layout->view('${1}', ${2});
snippet thisf
	$this->${1}(${2})
snippet thismodel
	$this->${1}->${2}(${3})
# Laravel
snippet App # Laravel 4: App::abort()
	App::abort(${1:$code}, ${2:$message}, ${3:$headers});

snippet App # Laravel 4: App::after()
	App::after(${1:$callback});

snippet App # Laravel 4: App::before()
	App::before(${1:$callback});

snippet App # Laravel 4: App::bindInstallPaths()
	App::bindInstallPaths(${1:$paths});

snippet App # Laravel 4: App::boot()
	App::boot();

snippet App # Laravel 4: App::booted()
	App::booted(${1:$callback});

snippet App # Laravel 4: App::booting()
	App::booting(${1:$callback});

snippet App # Laravel 4: App::close()
	App::close(${1:$callback});

snippet App # Laravel 4: App::detectEnvironment()
	App::detectEnvironment(${1:$environments});

snippet App # Laravel 4: App::dispatch()
	App::dispatch(${1:$request});

snippet App # Laravel 4: App::down()
	App::down(${1:$callback});

snippet App # Laravel 4: App::environment()
	App::environment();

snippet App # Laravel 4: App::error()
	App::error(${1:$callback});

snippet App # Laravel 4: App::fatal()
	App::fatal(${1:$callback});

snippet App # Laravel 4: App::finish()
	App::finish(${1:$callback});

snippet App # Laravel 4: App::getConfigLoader()
	App::getConfigLoader();

snippet App # Laravel 4: App::getLoadedProviders()
	App::getLoadedProviders();

snippet App # Laravel 4: App::getProviderRepository()
	App::getProviderRepository();

snippet App # Laravel 4: App::handle()
	App::handle(${1:$request}, ${2:$type}, ${3:$catch});

snippet App # Laravel 4: App::isDownForMaintenance()
	App::isDownForMaintenance();

snippet App # Laravel 4: App::loadDeferredProviders()
	App::loadDeferredProviders();

snippet App # Laravel 4: App::make()
	App::make(${1:$abstract}, ${2:$parameters});

snippet App # Laravel 4: App::missing()
	App::missing(${1:$callback});

snippet App # Laravel 4: App::prepareRequest()
	App::prepareRequest(${1:$request});

snippet App # Laravel 4: App::prepareResponse()
	App::prepareResponse(${1:$value});

snippet App # Laravel 4: App::register()
	App::register(${1:$provider}, ${2:$options});

snippet App # Laravel 4: App::run()
	App::run();

snippet App # Laravel 4: App::runningInConsole()
	App::runningInConsole();

snippet App # Laravel 4: App::runningUnitTests()
	App::runningUnitTests();

snippet App # Laravel 4: App::setDeferredServices()
	App::setDeferredServices(${1:$services});

snippet App # Laravel 4: App::setLocale()
	App::setLocale(${1:$locale});

snippet App # Laravel 4: App::setRequestForConsoleEnvironment()
	App::setRequestForConsoleEnvironment();

snippet App # Laravel 4: App::shutdown()
	App::shutdown(${1:$callback});

snippet App # Laravel 4: App::startExceptionHandling()
	App::startExceptionHandling();

snippet Art # Laravel 4: Artisan::call()
	Artisan::call(${1:$command}, ${2:$parameters}, ${3:$output});

snippet Auth # Laravel 4: Auth::createEloquentDriver()
	Auth::createEloquentDriver();

snippet Config # Laravel 4: Config::addNamespace()
	Config::addNamespace(${1:$namespace}, ${2:$hint});

snippet Config # Laravel 4: Config::afterLoading()
	Config::afterLoading(${1:$namespace}, ${2:$callback});

snippet Config # Laravel 4: Config::get()
	Config::get(${1:$key}, ${2:$default});

snippet Config # Laravel 4: Config::getAfterLoadCallbacks()
	Config::getAfterLoadCallbacks();

snippet Config # Laravel 4: Config::getEnvironment()
	Config::getEnvironment();

snippet Config # Laravel 4: Config::getItems()
	Config::getItems();

snippet Config # Laravel 4: Config::getLoader()
	Config::getLoader();

snippet Config # Laravel 4: Config::getNamespaces()
	Config::getNamespaces();

snippet Config # Laravel 4: Config::has()
	Config::has(${1:$key});

snippet Config # Laravel 4: Config::hasGroup()
	Config::hasGroup(${1:$key});

snippet Config # Laravel 4: Config::offsetExists()
	Config::offsetExists(${1:$key});

snippet Config # Laravel 4: Config::offsetGet()
	Config::offsetGet(${1:$key});

snippet Config # Laravel 4: Config::offsetSet()
	Config::offsetSet(${1:$key}, ${2:$value});

snippet Config # Laravel 4: Config::offsetUnset()
	Config::offsetUnset(${1:$key});

snippet Config # Laravel 4: Config::package()
	Config::package(${1:$package}, ${2:$hint}, ${3:$namespace});

snippet Config # Laravel 4: Config::set()
	Config::set(${1:$key}, ${2:$value});

snippet Config # Laravel 4: Config::setLoader()
	Config::setLoader(${1:$loader});

snippet Cookie # Laravel 4: Cookie::forever()
	Cookie::forever(${1:$name}, ${2:$value}, ${3:$path}, ${4:$domain}, ${5:$secure}, ${6:$httpOnly});

snippet Cookie # Laravel 4: Cookie::forget()
	Cookie::forget(${1:$name});

snippet Cookie # Laravel 4: Cookie::get()
	Cookie::get(${1:$key}, ${2:$default});

snippet Cookie # Laravel 4: Cookie::getEncrypter()
	Cookie::getEncrypter();

snippet Cookie # Laravel 4: Cookie::getRequest()
	Cookie::getRequest();

snippet Cookie # Laravel 4: Cookie::has()
	Cookie::has(${1:$key});

snippet Cookie # Laravel 4: Cookie::make()
	Cookie::make(${1:$name}, ${2:$value}, ${3:$minutes}, ${4:$path}, ${5:$domain}, ${6:$secure}, ${7:$httpOnly});

snippet Cookie # Laravel 4: Cookie::setDefaultPathAndDomain()
	Cookie::setDefaultPathAndDomain(${1:$path}, ${2:$domain});

snippet Crypt # Laravel 4: Crypt::decrypt()
	Crypt::decrypt(${1:$payload});

snippet Crypt # Laravel 4: Crypt::encrypt()
	Crypt::encrypt(${1:$value});

snippet Crypt # Laravel 4: Crypt::setCipher()
	Crypt::setCipher(${1:$cipher});

snippet Crypt # Laravel 4: Crypt::setKey()
	Crypt::setKey(${1:$key});

snippet Crypt # Laravel 4: Crypt::setMode()
	Crypt::setMode(${1:$mode});

snippet DB # Laravel 4: DB::connection()
	DB::connection(${1:$name});

snippet DB # Laravel 4: DB::extend()
	DB::extend(${1:$name}, ${2:$resolver});

snippet DB # Laravel 4: DB::getDefaultConnection()
	DB::getDefaultConnection();

snippet DB # Laravel 4: DB::reconnect()
	DB::reconnect(${1:$name});

snippet DB # Laravel 4: DB::setDefaultConnection()
	DB::setDefaultConnection(${1:$name});

snippet Event # Laravel 4: Event::createClassListener()
	Event::createClassListener(${1:$listener});

snippet Event # Laravel 4: Event::fire()
	Event::fire(${1:$event}, ${2:$payload}, ${3:$halt});

snippet Event # Laravel 4: Event::flush()
	Event::flush(${1:$event});

snippet Event # Laravel 4: Event::getListeners()
	Event::getListeners(${1:$eventName});

snippet Event # Laravel 4: Event::hasListeners()
	Event::hasListeners(${1:$eventName});

snippet Event # Laravel 4: Event::listen()
	Event::listen(${1:$event}, ${2:$listener}, ${3:$priority});

snippet Event # Laravel 4: Event::makeListener()
	Event::makeListener(${1:$listener});

snippet Event # Laravel 4: Event::queue()
	Event::queue(${1:$event}, ${2:$payload});

snippet Event # Laravel 4: Event::subscribe()
	Event::subscribe(${1:$subscriber});

snippet Event # Laravel 4: Event::until()
	Event::until(${1:$event}, ${2:$payload});

snippet File # Laravel 4: File::allFiles()
	File::allFiles(${1:$directory});

snippet File # Laravel 4: File::append()
	File::append(${1:$path}, ${2:$data});

snippet File # Laravel 4: File::cleanDirectory()
	File::cleanDirectory(${1:$directory});

snippet File # Laravel 4: File::copy()
	File::copy(${1:$path}, ${2:$target});

snippet File # Laravel 4: File::copyDirectory()
	File::copyDirectory(${1:$directory}, ${2:$destination}, ${3:$options});

snippet File # Laravel 4: File::delete()
	File::delete(${1:$path});

snippet File # Laravel 4: File::deleteDirectory()
	File::deleteDirectory(${1:$directory}, ${2:$preserve});

snippet File # Laravel 4: File::directories()
	File::directories(${1:$directory});

snippet File # Laravel 4: File::exists()
	File::exists(${1:$path});

snippet File # Laravel 4: File::extension()
	File::extension(${1:$path});

snippet File # Laravel 4: File::files()
	File::files(${1:$directory});

snippet File # Laravel 4: File::get()
	File::get(${1:$path});

snippet File # Laravel 4: File::getRemote()
	File::getRemote(${1:$path});

snippet File # Laravel 4: File::getRequire()
	File::getRequire(${1:$path});

snippet File # Laravel 4: File::glob()
	File::glob(${1:$pattern}, ${2:$flags});

snippet File # Laravel 4: File::isDirectory()
	File::isDirectory(${1:$directory});

snippet File # Laravel 4: File::isFile()
	File::isFile(${1:$file});

snippet File # Laravel 4: File::isWritable()
	File::isWritable(${1:$path});

snippet File # Laravel 4: File::lastModified()
	File::lastModified(${1:$path});

snippet File # Laravel 4: File::makeDirectory()
	File::makeDirectory(${1:$path}, ${2:$mode}, ${3:$recursive});

snippet File # Laravel 4: File::move()
	File::move(${1:$path}, ${2:$target});

snippet File # Laravel 4: File::put()
	File::put(${1:$path}, ${2:$contents});

snippet File # Laravel 4: File::requireOnce()
	File::requireOnce(${1:$file});

snippet File # Laravel 4: File::size()
	File::size(${1:$path});

snippet File # Laravel 4: File::type()
	File::type(${1:$path});

snippet Form # Laravel 4: Form::button()
	Form::button(${1:$value}, ${2:$options});

snippet Form # Laravel 4: Form::checkbox()
	Form::checkbox(${1:$name}, ${2:$value}, ${3:$checked}, ${4:$options});

snippet Form # Laravel 4: Form::close()
	Form::close();

snippet Form # Laravel 4: Form::email()
	Form::email(${1:$name}, ${2:$value}, ${3:$options});

snippet Form # Laravel 4: Form::file()
	Form::file(${1:$name}, ${2:$options});

snippet Form # Laravel 4: Form::getSessionStore()
	Form::getSessionStore();

snippet Form # Laravel 4: Form::getValueAttribute()
	Form::getValueAttribute(${1:$name}, ${2:$value});

snippet Form # Laravel 4: Form::hidden()
	Form::hidden(${1:$name}, ${2:$value}, ${3:$options});

snippet Form # Laravel 4: Form::image()
	Form::image(${1:$url}, ${2:$name}, ${3:$attributes});

snippet Form # Laravel 4: Form::input()
	Form::input(${1:$type}, ${2:$name}, ${3:$value}, ${4:$options});

snippet Form # Laravel 4: Form::label()
	Form::label(${1:$name}, ${2:$value}, ${3:$options});

snippet Form # Laravel 4: Form::macro()
	Form::macro(${1:$name}, ${2:$macro});

snippet Form # Laravel 4: Form::model()
	Form::model(${1:$model}, ${2:$options});

snippet Form # Laravel 4: Form::open()
	Form::open(${1:$options});

snippet Form # Laravel 4: Form::password()
	Form::password(${1:$name}, ${2:$options});

snippet Form # Laravel 4: Form::radio()
	Form::radio(${1:$name}, ${2:$value}, ${3:$checked}, ${4:$options});

snippet Form # Laravel 4: Form::reset()
	Form::reset(${1:$value}, ${2:$attributes});

snippet Form # Laravel 4: Form::select()
	Form::select(${1:$name}, ${2:$list}, ${3:$selected}, ${4:$options});

snippet Form # Laravel 4: Form::setSessionStore()
	Form::setSessionStore(${1:$session});

snippet Form # Laravel 4: Form::submit()
	Form::submit(${1:$value}, ${2:$options});

snippet Form # Laravel 4: Form::text()
	Form::text(${1:$name}, ${2:$value}, ${3:$options});

snippet Form # Laravel 4: Form::textarea()
	Form::textarea(${1:$name}, ${2:$value}, ${3:$options});

snippet Form # Laravel 4: Form::token()
	Form::token();

snippet HTML # Laravel 4: HTML::attributes()
	HTML::attributes(${1:$attributes});

snippet HTML # Laravel 4: HTML::decode()
	HTML::decode(${1:$value});

snippet HTML # Laravel 4: HTML::email()
	HTML::email(${1:$email});

snippet HTML # Laravel 4: HTML::entities()
	HTML::entities(${1:$value});

snippet HTML # Laravel 4: HTML::image()
	HTML::image(${1:$url}, ${2:$alt}, ${3:$attributes});

snippet HTML # Laravel 4: HTML::link()
	HTML::link(${1:$url}, ${2:$title}, ${3:$attributes}, ${4:$secure});

snippet HTML # Laravel 4: HTML::linkAction()
	HTML::linkAction(${1:$action}, ${2:$title}, ${3:$parameters}, ${4:$attributes});

snippet HTML # Laravel 4: HTML::linkAsset()
	HTML::linkAsset(${1:$url}, ${2:$title}, ${3:$attributes}, ${4:$secure});

snippet HTML # Laravel 4: HTML::linkRoute()
	HTML::linkRoute(${1:$name}, ${2:$title}, ${3:$parameters}, ${4:$attributes});

snippet HTML # Laravel 4: HTML::linkSecureAsset()
	HTML::linkSecureAsset(${1:$url}, ${2:$title}, ${3:$attributes});

snippet HTML # Laravel 4: HTML::macro()
	HTML::macro(${1:$name}, ${2:$macro});

snippet HTML # Laravel 4: HTML::mailto()
	HTML::mailto(${1:$email}, ${2:$title}, ${3:$attributes});

snippet HTML # Laravel 4: HTML::obfuscate()
	HTML::obfuscate(${1:$value});

snippet HTML # Laravel 4: HTML::ol()
	HTML::ol(${1:$list}, ${2:$attributes});

snippet HTML # Laravel 4: HTML::script()
	HTML::script(${1:$url}, ${2:$attributes});

snippet HTML # Laravel 4: HTML::secureLink()
	HTML::secureLink(${1:$url}, ${2:$title}, ${3:$attributes});

snippet HTML # Laravel 4: HTML::style()
	HTML::style(${1:$url}, ${2:$attributes});

snippet HTML # Laravel 4: HTML::ul()
	HTML::ul(${1:$list}, ${2:$attributes});

snippet Hash # Laravel 4: Hash::check()
	Hash::check(${1:$value}, ${2:$hashedValue}, ${3:$options});

snippet Hash # Laravel 4: Hash::make()
	Hash::make(${1:$value}, ${2:$options});

snippet Hash # Laravel 4: Hash::needsRehash()
	Hash::needsRehash(${1:$hashedValue}, ${2:$options});

snippet Input # Laravel 4: Input::ajax()
	Input::ajax();

snippet Input # Laravel 4: Input::all()
	Input::all();

snippet Input # Laravel 4: Input::cookie()
	Input::cookie(${1:$key}, ${2:$default});

snippet Input # Laravel 4: Input::except()
	Input::except(${1:$keys});

snippet Input # Laravel 4: Input::file()
	Input::file(${1:$key}, ${2:$default});

snippet Input # Laravel 4: Input::flash()
	Input::flash(${1:$filter}, ${2:$keys});

snippet Input # Laravel 4: Input::flashExcept()
	Input::flashExcept(${1:$keys});

snippet Input # Laravel 4: Input::flashOnly()
	Input::flashOnly(${1:$keys});

snippet Input # Laravel 4: Input::flush()
	Input::flush();

snippet Input # Laravel 4: Input::fullUrl()
	Input::fullUrl();

snippet Input # Laravel 4: Input::getSessionStore()
	Input::getSessionStore();

snippet Input # Laravel 4: Input::has()
	Input::has(${1:$key});

snippet Input # Laravel 4: Input::hasFile()
	Input::hasFile(${1:$key});

snippet Input # Laravel 4: Input::hasSessionStore()
	Input::hasSessionStore();

snippet Input # Laravel 4: Input::header()
	Input::header(${1:$key}, ${2:$default});

snippet Input # Laravel 4: Input::input()
	Input::input(${1:$key}, ${2:$default});

snippet Input # Laravel 4: Input::instance()
	Input::instance();

snippet Input # Laravel 4: Input::is()
	Input::is(${1:$pattern});

snippet Input # Laravel 4: Input::isJson()
	Input::isJson();

snippet Input # Laravel 4: Input::json()
	Input::json(${1:$key}, ${2:$default});

snippet Input # Laravel 4: Input::merge()
	Input::merge(${1:$input});

snippet Input # Laravel 4: Input::old()
	Input::old(${1:$key}, ${2:$default});

snippet Input # Laravel 4: Input::only()
	Input::only(${1:$keys});

snippet Input # Laravel 4: Input::path()
	Input::path();

snippet Input # Laravel 4: Input::query()
	Input::query(${1:$key}, ${2:$default});

snippet Input # Laravel 4: Input::replace()
	Input::replace(${1:$input});

snippet Input # Laravel 4: Input::root()
	Input::root();

snippet Input # Laravel 4: Input::secure()
	Input::secure();

snippet Input # Laravel 4: Input::segment()
	Input::segment(${1:$index}, ${2:$default});

snippet Input # Laravel 4: Input::segments()
	Input::segments();

snippet Input # Laravel 4: Input::server()
	Input::server(${1:$key}, ${2:$default});

snippet Input # Laravel 4: Input::setSessionStore()
	Input::setSessionStore(${1:$session});

snippet Input # Laravel 4: Input::url()
	Input::url();

snippet Lang # Laravel 4: Lang::addNamespace()
	Lang::addNamespace(${1:$namespace}, ${2:$hint});

snippet Lang # Laravel 4: Lang::choice()
	Lang::choice(${1:$key}, ${2:$number}, ${3:$replace}, ${4:$locale});

snippet Lang # Laravel 4: Lang::get()
	Lang::get(${1:$key}, ${2:$replace}, ${3:$locale});

snippet Lang # Laravel 4: Lang::getLoader()
	Lang::getLoader();

snippet Lang # Laravel 4: Lang::getLocale()
	Lang::getLocale();

snippet Lang # Laravel 4: Lang::getSelector()
	Lang::getSelector();

snippet Lang # Laravel 4: Lang::has()
	Lang::has(${1:$key}, ${2:$locale});

snippet Lang # Laravel 4: Lang::load()
	Lang::load(${1:$namespace}, ${2:$group}, ${3:$locale});

snippet Lang # Laravel 4: Lang::locale()
	Lang::locale();

snippet Lang # Laravel 4: Lang::parseKey()
	Lang::parseKey(${1:$key});

snippet Lang # Laravel 4: Lang::setLocale()
	Lang::setLocale(${1:$locale});

snippet Lang # Laravel 4: Lang::setSelector()
	Lang::setSelector(${1:$selector});

snippet Lang # Laravel 4: Lang::trans()
	Lang::trans(${1:$id}, ${2:$parameters}, ${3:$domain}, ${4:$locale});

snippet Lang # Laravel 4: Lang::transChoice()
	Lang::transChoice(${1:$id}, ${2:$number}, ${3:$parameters}, ${4:$domain}, ${5:$locale});

snippet Log # Laravel 4: Log::getEventDispatcher()
	Log::getEventDispatcher();

snippet Log # Laravel 4: Log::getMonolog()
	Log::getMonolog();

snippet Log # Laravel 4: Log::listen()
	Log::listen(${1:$callback});

snippet Log # Laravel 4: Log::setEventDispatcher()
	Log::setEventDispatcher(${1:$dispatcher});

snippet Log # Laravel 4: Log::useDailyFiles()
	Log::useDailyFiles(${1:$path}, ${2:$days}, ${3:$level});

snippet Log # Laravel 4: Log::useFiles()
	Log::useFiles(${1:$path}, ${2:$level});

snippet Mail # Laravel 4: Mail::alwaysFrom()
	Mail::alwaysFrom(${1:$address}, ${2:$name});

snippet Mail # Laravel 4: Mail::getSwiftMailer()
	Mail::getSwiftMailer();

snippet Mail # Laravel 4: Mail::getViewEnvironment()
	Mail::getViewEnvironment();

snippet Mail # Laravel 4: Mail::handleQueuedMessage()
	Mail::handleQueuedMessage(${1:$job}, ${2:$data});

snippet Mail # Laravel 4: Mail::later()
	Mail::later(${1:$delay}, ${2:$view}, ${3:$data}, ${4:$callback}, ${5:$queue});

snippet Mail # Laravel 4: Mail::laterOn()
	Mail::laterOn(${1:$queue}, ${2:$delay}, ${3:$view}, ${4:$data}, ${5:$callback});

snippet Mail # Laravel 4: Mail::plain()
	Mail::plain(${1:$view}, ${2:$data}, ${3:$callback});

snippet Mail # Laravel 4: Mail::pretend()
	Mail::pretend(${1:$value});

snippet Mail # Laravel 4: Mail::queue()
	Mail::queue(${1:$view}, ${2:$data}, ${3:$callback}, ${4:$queue});

snippet Mail # Laravel 4: Mail::queueOn()
	Mail::queueOn(${1:$queue}, ${2:$view}, ${3:$data}, ${4:$callback});

snippet Mail # Laravel 4: Mail::send()
	Mail::send(${1:$view}, ${2:$data}, ${3:$callback});

snippet Mail # Laravel 4: Mail::setContainer()
	Mail::setContainer(${1:$container});

snippet Mail # Laravel 4: Mail::setLogger()
	Mail::setLogger(${1:$logger});

snippet Mail # Laravel 4: Mail::setQueue()
	Mail::setQueue(${1:$queue});

snippet Mail # Laravel 4: Mail::setSwiftMailer()
	Mail::setSwiftMailer(${1:$swift});

snippet Pagin # Laravel 4: Paginator::getCurrentPage()
	Paginator::getCurrentPage();

snippet Pagin # Laravel 4: Paginator::getCurrentUrl()
	Paginator::getCurrentUrl();

snippet Pagin # Laravel 4: Paginator::getLocale()
	Paginator::getLocale();

snippet Pagin # Laravel 4: Paginator::getPageName()
	Paginator::getPageName();

snippet Pagin # Laravel 4: Paginator::getPaginationView()
	Paginator::getPaginationView(${1:$paginator});

snippet Pagin # Laravel 4: Paginator::getRequest()
	Paginator::getRequest();

snippet Pagin # Laravel 4: Paginator::getTranslator()
	Paginator::getTranslator();

snippet Pagin # Laravel 4: Paginator::getViewDriver()
	Paginator::getViewDriver();

snippet Pagin # Laravel 4: Paginator::getViewName()
	Paginator::getViewName();

snippet Pagin # Laravel 4: Paginator::make()
	Paginator::make(${1:$items}, ${2:$total}, ${3:$perPage});

snippet Pagin # Laravel 4: Paginator::setBaseUrl()
	Paginator::setBaseUrl(${1:$baseUrl});

snippet Pagin # Laravel 4: Paginator::setCurrentPage()
	Paginator::setCurrentPage(${1:$number});

snippet Pagin # Laravel 4: Paginator::setLocale()
	Paginator::setLocale(${1:$locale});

snippet Pagin # Laravel 4: Paginator::setPageName()
	Paginator::setPageName(${1:$pageName});

snippet Pagin # Laravel 4: Paginator::setRequest()
	Paginator::setRequest(${1:$request});

snippet Pagin # Laravel 4: Paginator::setViewDriver()
	Paginator::setViewDriver(${1:$view});

snippet Pagin # Laravel 4: Paginator::setViewName()
	Paginator::setViewName(${1:$viewName});

snippet Queue # Laravel 4: Queue::addConnector()
	Queue::addConnector(${1:$driver}, ${2:$resolver});

snippet Queue # Laravel 4: Queue::connection()
	Queue::connection(${1:$name});

snippet Redir # Laravel 4: Redirect::action()
	Redirect::action(${1:$action}, ${2:$parameters}, ${3:$status}, ${4:$headers});

snippet Redir # Laravel 4: Redirect::back()
	Redirect::back(${1:$status}, ${2:$headers});

snippet Redir # Laravel 4: Redirect::getUrlGenerator()
	Redirect::getUrlGenerator();

snippet Redir # Laravel 4: Redirect::guest()
	Redirect::guest(${1:$path}, ${2:$status}, ${3:$headers}, ${4:$secure});

snippet Redir # Laravel 4: Redirect::home()
	Redirect::home(${1:$status});

snippet Redir # Laravel 4: Redirect::intended()
	Redirect::intended(${1:$default}, ${2:$status}, ${3:$headers}, ${4:$secure});

snippet Redir # Laravel 4: Redirect::refresh()
	Redirect::refresh(${1:$status}, ${2:$headers});

snippet Redir # Laravel 4: Redirect::route()
	Redirect::route(${1:$route}, ${2:$parameters}, ${3:$status}, ${4:$headers});

snippet Redir # Laravel 4: Redirect::secure()
	Redirect::secure(${1:$path}, ${2:$status}, ${3:$headers});

snippet Redir # Laravel 4: Redirect::setSession()
	Redirect::setSession(${1:$session});

snippet Redir # Laravel 4: Redirect::to()
	Redirect::to(${1:$path}, ${2:$status}, ${3:$headers}, ${4:$secure});

snippet Redis # Laravel 4: Redis::command()
	Redis::command(${1:$method}, ${2:$parameters});

snippet Redis # Laravel 4: Redis::connection()
	Redis::connection(${1:$name});

snippet Req # Laravel 4: Request::ajax()
	Request::ajax();

snippet Req # Laravel 4: Request::all()
	Request::all();

snippet Req # Laravel 4: Request::cookie()
	Request::cookie(${1:$key}, ${2:$default});

snippet Req # Laravel 4: Request::except()
	Request::except(${1:$keys});

snippet Req # Laravel 4: Request::file()
	Request::file(${1:$key}, ${2:$default});

snippet Req # Laravel 4: Request::flash()
	Request::flash(${1:$filter}, ${2:$keys});

snippet Req # Laravel 4: Request::flashExcept()
	Request::flashExcept(${1:$keys});

snippet Req # Laravel 4: Request::flashOnly()
	Request::flashOnly(${1:$keys});

snippet Req # Laravel 4: Request::flush()
	Request::flush();

snippet Req # Laravel 4: Request::fullUrl()
	Request::fullUrl();

snippet Req # Laravel 4: Request::getSessionStore()
	Request::getSessionStore();

snippet Req # Laravel 4: Request::has()
	Request::has(${1:$key});

snippet Req # Laravel 4: Request::hasFile()
	Request::hasFile(${1:$key});

snippet Req # Laravel 4: Request::hasSessionStore()
	Request::hasSessionStore();

snippet Req # Laravel 4: Request::header()
	Request::header(${1:$key}, ${2:$default});

snippet Req # Laravel 4: Request::input()
	Request::input(${1:$key}, ${2:$default});

snippet Req # Laravel 4: Request::instance()
	Request::instance();

snippet Req # Laravel 4: Request::is()
	Request::is(${1:$pattern});

snippet Req # Laravel 4: Request::isJson()
	Request::isJson();

snippet Req # Laravel 4: Request::json()
	Request::json(${1:$key}, ${2:$default});

snippet Req # Laravel 4: Request::merge()
	Request::merge(${1:$input});

snippet Req # Laravel 4: Request::old()
	Request::old(${1:$key}, ${2:$default});

snippet Req # Laravel 4: Request::only()
	Request::only(${1:$keys});

snippet Req # Laravel 4: Request::path()
	Request::path();

snippet Req # Laravel 4: Request::query()
	Request::query(${1:$key}, ${2:$default});

snippet Req # Laravel 4: Request::replace()
	Request::replace(${1:$input});

snippet Req # Laravel 4: Request::root()
	Request::root();

snippet Req # Laravel 4: Request::secure()
	Request::secure();

snippet Req # Laravel 4: Request::segment()
	Request::segment(${1:$index}, ${2:$default});

snippet Req # Laravel 4: Request::segments()
	Request::segments();

snippet Req # Laravel 4: Request::server()
	Request::server(${1:$key}, ${2:$default});

snippet Req # Laravel 4: Request::setSessionStore()
	Request::setSessionStore(${1:$session});

snippet Req # Laravel 4: Request::url()
	Request::url();

snippet Route # Laravel 4: Route::addFilter()
	Route::addFilter(${1:$name}, ${2:$callback});

snippet Route # Laravel 4: Route::after()
	Route::after(${1:$callback});

snippet Route # Laravel 4: Route::any()
	Route::any(${1:$pattern}, ${2:$action});

snippet Route # Laravel 4: Route::before()
	Route::before(${1:$callback});

snippet Route # Laravel 4: Route::bind()
	Route::bind(${1:$key}, ${2:$binder});

snippet Route # Laravel 4: Route::callCloseFilter()
	Route::callCloseFilter(${1:$request}, ${2:$response});

snippet Route # Laravel 4: Route::callFinishFilter()
	Route::callFinishFilter(${1:$request}, ${2:$response});

snippet Route # Laravel 4: Route::close()
	Route::close(${1:$callback});

snippet Route # Laravel 4: Route::controller()
	Route::controller(${1:$uri}, ${2:$controller}, ${3:$names});

snippet Route # Laravel 4: Route::controllers()
	Route::controllers(${1:$controllers});

snippet Route # Laravel 4: Route::currentRouteAction()
	Route::currentRouteAction();

snippet Route # Laravel 4: Route::currentRouteName()
	Route::currentRouteName();

snippet Route # Laravel 4: Route::currentRouteNamed()
	Route::currentRouteNamed(${1:$name});

snippet Route # Laravel 4: Route::currentRouteUses()
	Route::currentRouteUses(${1:$action});

snippet Route # Laravel 4: Route::delete()
	Route::delete(${1:$pattern}, ${2:$action});

snippet Route # Laravel 4: Route::disableFilters()
	Route::disableFilters();

snippet Route # Laravel 4: Route::dispatch()
	Route::dispatch(${1:$request});

snippet Route # Laravel 4: Route::enableFilters()
	Route::enableFilters();

snippet Route # Laravel 4: Route::filtersEnabled()
	Route::filtersEnabled();

snippet Route # Laravel 4: Route::findPatternFilters()
	Route::findPatternFilters(${1:$request});

snippet Route # Laravel 4: Route::finish()
	Route::finish(${1:$callback});

snippet Route # Laravel 4: Route::get()
	Route::get(${1:$pattern}, ${2:$action});

snippet Route # Laravel 4: Route::getContainer()
	Route::getContainer();

snippet Route # Laravel 4: Route::getCurrentRoute()
	Route::getCurrentRoute();

snippet Route # Laravel 4: Route::getFilter()
	Route::getFilter(${1:$name});

snippet Route # Laravel 4: Route::getFilters()
	Route::getFilters();

snippet Route # Laravel 4: Route::getGlobalFilters()
	Route::getGlobalFilters();

snippet Route # Laravel 4: Route::getInspector()
	Route::getInspector();

snippet Route # Laravel 4: Route::getRequest()
	Route::getRequest();

snippet Route # Laravel 4: Route::getResourceUri()
	Route::getResourceUri(${1:$resource});

snippet Route # Laravel 4: Route::getRoutes()
	Route::getRoutes();

snippet Route # Laravel 4: Route::group()
	Route::group(${1:$attributes}, ${2:$callback});

snippet Route # Laravel 4: Route::hasBinder()
	Route::hasBinder(${1:$key});

snippet Route # Laravel 4: Route::match()
	Route::match(${1:$method}, ${2:$pattern}, ${3:$action});

snippet Route # Laravel 4: Route::matchFilter()
	Route::matchFilter(${1:$pattern}, ${2:$names});

snippet Route # Laravel 4: Route::model()
	Route::model(${1:$key}, ${2:$class}, ${3:$callback});

snippet Route # Laravel 4: Route::options()
	Route::options(${1:$pattern}, ${2:$action});

snippet Route # Laravel 4: Route::patch()
	Route::patch(${1:$pattern}, ${2:$action});

snippet Route # Laravel 4: Route::pattern()
	Route::pattern(${1:$key}, ${2:$pattern});

snippet Route # Laravel 4: Route::performBinding()
	Route::performBinding(${1:$key}, ${2:$value}, ${3:$route});

snippet Route # Laravel 4: Route::post()
	Route::post(${1:$pattern}, ${2:$action});

snippet Route # Laravel 4: Route::prepare()
	Route::prepare(${1:$value}, ${2:$request});

snippet Route # Laravel 4: Route::put()
	Route::put(${1:$pattern}, ${2:$action});

snippet Route # Laravel 4: Route::resource()
	Route::resource(${1:$resource}, ${2:$controller}, ${3:$options});

snippet Route # Laravel 4: Route::setContainer()
	Route::setContainer(${1:$container});

snippet Route # Laravel 4: Route::setCurrentRoute()
	Route::setCurrentRoute(${1:$route});

snippet Route # Laravel 4: Route::setInspector()
	Route::setInspector(${1:$inspector});

snippet Sess # Laravel 4: Session::flash()
	Session::flash(${1:$key}, ${2:$value});

snippet Sess # Laravel 4: Session::flashInput()
	Session::flashInput(${1:$value});

snippet Sess # Laravel 4: Session::flush()
	Session::flush();

snippet Sess # Laravel 4: Session::forget()
	Session::forget(${1:$key});

snippet Sess # Laravel 4: Session::get()
	Session::get(${1:$name}, ${2:$default});

snippet Sess # Laravel 4: Session::getOldInput()
	Session::getOldInput(${1:$key}, ${2:$default});

snippet Sess # Laravel 4: Session::getToken()
	Session::getToken();

snippet Sess # Laravel 4: Session::has()
	Session::has(${1:$name});

snippet Sess # Laravel 4: Session::hasOldInput()
	Session::hasOldInput(${1:$key});

snippet Sess # Laravel 4: Session::keep()
	Session::keep(${1:$keys});

snippet Sess # Laravel 4: Session::push()
	Session::push(${1:$key}, ${2:$value});

snippet Sess # Laravel 4: Session::put()
	Session::put(${1:$key}, ${2:$value});

snippet Sess # Laravel 4: Session::reflash()
	Session::reflash();

snippet Sess # Laravel 4: Session::regenerate()
	Session::regenerate();

snippet Sess # Laravel 4: Session::save()
	Session::save();

snippet Sess # Laravel 4: Session::start()
	Session::start();

snippet Sess # Laravel 4: Session::token()
	Session::token();

snippet URL # Laravel 4: URL::action()
	URL::action(${1:$action}, ${2:$parameters}, ${3:$absolute});

snippet URL # Laravel 4: URL::asset()
	URL::asset(${1:$path}, ${2:$secure});

snippet URL # Laravel 4: URL::current()
	URL::current();

snippet URL # Laravel 4: URL::full()
	URL::full();

snippet URL # Laravel 4: URL::getGenerator()
	URL::getGenerator();

snippet URL # Laravel 4: URL::getRequest()
	URL::getRequest();

snippet URL # Laravel 4: URL::isValidUrl()
	URL::isValidUrl(${1:$path});

snippet URL # Laravel 4: URL::previous()
	URL::previous();

snippet URL # Laravel 4: URL::route()
	URL::route(${1:$name}, ${2:$parameters}, ${3:$absolute});

snippet URL # Laravel 4: URL::secure()
	URL::secure(${1:$path}, ${2:$parameters});

snippet URL # Laravel 4: URL::secureAsset()
	URL::secureAsset(${1:$path});

snippet URL # Laravel 4: URL::setGenerator()
	URL::setGenerator(${1:$generator});

snippet URL # Laravel 4: URL::setRequest()
	URL::setRequest(${1:$request});

snippet URL # Laravel 4: URL::to()
	URL::to(${1:$path}, ${2:$parameters}, ${3:$secure});

snippet Valid # Laravel 4: Validator::extend()
	Validator::extend(${1:$rule}, ${2:$extension});

snippet Valid # Laravel 4: Validator::extendImplicit()
	Validator::extendImplicit(${1:$rule}, ${2:$extension});

snippet Valid # Laravel 4: Validator::getPresenceVerifier()
	Validator::getPresenceVerifier();

snippet Valid # Laravel 4: Validator::getTranslator()
	Validator::getTranslator();

snippet Valid # Laravel 4: Validator::make()
	Validator::make(${1:$data}, ${2:$rules}, ${3:$messages});

snippet Valid # Laravel 4: Validator::resolver()
	Validator::resolver(${1:$resolver});

snippet Valid # Laravel 4: Validator::setPresenceVerifier()
	Validator::setPresenceVerifier(${1:$presenceVerifier});

snippet View # Laravel 4: View::addExtension()
	View::addExtension(${1:$extension}, ${2:$engine}, ${3:$resolver});

snippet View # Laravel 4: View::addLocation()
	View::addLocation(${1:$location});

snippet View # Laravel 4: View::addNamespace()
	View::addNamespace(${1:$namespace}, ${2:$hints});

snippet View # Laravel 4: View::callComposer()
	View::callComposer(${1:$view});

snippet View # Laravel 4: View::composer()
	View::composer(${1:$views}, ${2:$callback});

snippet View # Laravel 4: View::decrementRender()
	View::decrementRender();

snippet View # Laravel 4: View::doneRendering()
	View::doneRendering();

snippet View # Laravel 4: View::exists()
	View::exists(${1:$view});

snippet View # Laravel 4: View::flushSections()
	View::flushSections();

snippet View # Laravel 4: View::getContainer()
	View::getContainer();

snippet View # Laravel 4: View::getDispatcher()
	View::getDispatcher();

snippet View # Laravel 4: View::getEngineResolver()
	View::getEngineResolver();

snippet View # Laravel 4: View::getExtensions()
	View::getExtensions();

snippet View # Laravel 4: View::getFinder()
	View::getFinder();

snippet View # Laravel 4: View::getNames()
	View::getNames();

snippet View # Laravel 4: View::getSections()
	View::getSections();

snippet View # Laravel 4: View::getShared()
	View::getShared();

snippet View # Laravel 4: View::incrementRender()
	View::incrementRender();

snippet View # Laravel 4: View::inject()
	View::inject(${1:$section}, ${2:$content});

snippet View # Laravel 4: View::make()
	View::make(${1:$view}, ${2:$data}, ${3:$mergeData});

snippet View # Laravel 4: View::name()
	View::name(${1:$view}, ${2:$name});

snippet View # Laravel 4: View::of()
	View::of(${1:$view}, ${2:$data});

snippet View # Laravel 4: View::renderEach()
	View::renderEach(${1:$view}, ${2:$data}, ${3:$iterator}, ${4:$empty});

snippet View # Laravel 4: View::setContainer()
	View::setContainer(${1:$container});

snippet View # Laravel 4: View::share()
	View::share(${1:$key}, ${2:$value});

snippet View # Laravel 4: View::startSection()
	View::startSection(${1:$section}, ${2:$content});

snippet View # Laravel 4: View::stopSection()
	View::stopSection(${1:$overwrite});

snippet View # Laravel 4: View::yieldContent()
	View::yieldContent(${1:$section});

snippet View # Laravel 4: View::yieldSection()
	View::yieldSection();

